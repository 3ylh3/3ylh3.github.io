<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringMVC请求处理流程</title>
      <link href="/2019/04/11/SpringMVC%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/04/11/SpringMVC%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>SpringMVC基于模型-视图-控制器模式（Model-View-Controller）实现，能够构建松散耦合的Web应用程序。</p><ul><li>模型：封装了需要返回给用户的数据，通常由POJO组成。</li><li>视图：主要用于呈现模型数据。</li><li>控制器：主要用来处理用户请求，并将合适模型传递给视图呈现。一个设计良好的控制器本身只做处理，将业务逻辑委托给具体的服务实现对象来做。</li></ul><p>SpringMVC处理请求的主要流程如下图所示：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringMVC%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/SpringMVC.png" alt="SpringMVC请求处理流程"></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring自动化装配机制</title>
      <link href="/2019/04/09/Spring%E8%87%AA%E5%8A%A8%E5%8C%96%E8%A3%85%E9%85%8D%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/04/09/Spring%E8%87%AA%E5%8A%A8%E5%8C%96%E8%A3%85%E9%85%8D%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>Spring从两个方面实现了bean的自动化装配：</p><ul><li>组件扫描：通过组件扫描，Spring会自动发现应用上下文中所创建的bean。</li><li>自动装配：Spring会自动满足bean之间的依赖。</li></ul><p>先来讲一下组件扫描:<br><a id="more"></a></p><h4 id="组件扫描"><a href="#组件扫描" class="headerlink" title="组件扫描"></a>组件扫描</h4><p>组件扫描是通过@Component注解实现的，来看一个bean的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.xiaobai.springdemo.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is a test bean."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个bean和普通bean的区别就在于它加上了@Component注解，这个注解告诉Spring这个类会作为组件类，并且Spring需要为这个类创建bean。只有@Component注解是不行的，因为Spring默认没有开启组件扫描，需要在xml配置文件中加上：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xiaobai.springdemo.bean"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样就可以直接使用不用刚在配置文件中显示的声明bean了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"auto.xml"</span>);</span><br><span class="line">        TestBean bean = (TestBean)ctx.getBean(<span class="string">"testBean"</span>);</span><br><span class="line">        bean.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a test bean.</span><br></pre></td></tr></table></figure></p><p>在上面的例子中我们没有指定bean的id，Spring会根据它的类名指定一个默认的id：类名的第一个字母变成小写。我们也可以指定bean的id：@Component(“xxx”)。<br>再来看一下自动装配：</p><h4 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h4><p>Spring的自动装配就是自动满足bean之间的依赖，通过@Autowired注解实现。@Autowired注解是通过byType模式实现自动注入的，即如果容器中存在一个和指定属性类型相同的bean，则将它注入，如果存在多个相同类型的则抛出异常，如果不存在同样也抛出异常（可以将@Autowired的required属性设置为false:@Autowired(required=false)来避免这个异常，设为false后如果没有匹配的bean,Spring会让这个bean处在未装配的状态，需要注意的是这样可能会造成NullPointerException）。来看下面的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBean2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestBean testBean;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"This is a test bean2."</span>);</span><br><span class="line">        testBean.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到这个bean中有一个TestBean类型的bean并且加上了@Autowired注解，这样就可以不用显示的在配置文件中声明两个bean的依赖关系了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"auto.xml"</span>);</span><br><span class="line">        TestBean2 bean = (TestBean2)ctx.getBean(<span class="string">"testBean2"</span>);</span><br><span class="line">        bean.print2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This is a test bean2.</span><br><span class="line">This is a test bean.</span><br></pre></td></tr></table></figure></p><p>@Autowired同样可以用在构造方法和setter方法上。</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实现SHA-1散列函数</title>
      <link href="/2019/04/09/Java%E5%AE%9E%E7%8E%B0SHA-1%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/"/>
      <url>/2019/04/09/Java%E5%AE%9E%E7%8E%B0SHA-1%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>SHA-1是一种安全散列算法，也是一种哈希函数，它能够将任意长度的信息散列成160位（bit）的消息摘要，散列值通常表示为40个十六进制数，结果是不可逆的。SHA-1主要数字签名，来验证数据的完整性。Java提供了MessageDigest类，可以用来实现SHA-1算法。MessageDigest.digest()方法返回的是byte数组，而SHA-1的结果常表示为40为十六进制数，因此需要进行转化，转化原理如下：<br>首先将byte数组每一位转为int类型，然后调用Integer.toHexString转为十六进制字符串，拼接到一个StringBuffer中，全部处理完后，将StringBuffer转为String即可。需要注意的是byte转为int需要进行与操作：&amp; 0xFF，目的是为了保证二进制数据的一致性，举个例子：一个byte是8个二进制位，例如byte类型的-12表示为1111 0100（负数补码表示，12的原码是0000 1100，补码就是取反1111 0011然后加1），如果直接转为int类型，那么就是前24位补1，就会变为1111 1111 1111 1111 1111 1111 1111 0100，会造成二进制补码不一致，所以需要与操作来实现：0x代表十六进制，F代表15,0xFF二进制表示为1111 1111，高24位补0与-12的补码表示进行与操作得到0000 0000 0000 0000 0000 0000 1111 0100，可以将高24位置为0，低8位保持不变，这样就保证了二进制补码的一致性。具体代码如下：<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SHA1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String str = <span class="string">"Hello World!"</span>;</span><br><span class="line">            <span class="comment">//生成MessageDigest对象</span></span><br><span class="line">            MessageDigest md = MessageDigest.getInstance(<span class="string">"SHA-1"</span>);</span><br><span class="line">            <span class="comment">//更新摘要</span></span><br><span class="line">            md.update(str.getBytes());</span><br><span class="line">            <span class="comment">//生成摘要</span></span><br><span class="line">            <span class="keyword">byte</span>[] data = md.digest();</span><br><span class="line">            <span class="comment">//将结果转为十六进制字符串</span></span><br><span class="line">            StringBuffer hexstr = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            String s = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">                s = Integer.toHexString(data[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line">                <span class="comment">//一个十六进制数4位，所以一个byte用两个十六进制数表示，不足的左补零</span></span><br><span class="line">                <span class="keyword">if</span> (s.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                    hexstr.append(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                hexstr.append(s);</span><br><span class="line">            &#125;</span><br><span class="line">            String result = hexstr.toString();</span><br><span class="line">            System.out.println(<span class="string">"result:"</span> + result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchAlgorithmException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MessageDigest类也提供MD5的支持，只需要将getInstance的参数变为MD5即可。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SHA-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/2019/04/04/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/04/04/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>在列举git常用命令之前，首先介绍一下git工作区和版本库的概念。<br>工作区(working directory):通俗讲就是电脑中的目录。<br>版本库(repository):工作区中有一个隐藏的.git目录，就是git的版本库，其中包含一个被称为stage(又叫index)的暂存区，还有git自动创建的一个master分支，以及一个指向master的指针HEAD。<br><a id="more"></a><br>接下来介绍git的常用命令：</p><ul><li>git init：将目录变为可管理的仓库</li><li>git add <file>:把对file的修改添加进暂存区</file></li><li>git commit -m “xxx”:将修改提交到当前分支，-m参数后跟的是提交说明</li><li>git log:查看提交过的版本信息，加上—graph参数可以看到合并图</li><li>git reflog:查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）</li><li>git reset  版本号:回退版本，参数：—soft:回退到commit之前的状态（工作区已经修改并且add进暂存区的状态） —mixed(默认):回退到add之前的状态（工作区已经修改但还没有add进暂存区的状态） —hard:强制回退，回退到工作区修改前的状态</li><li>git reset HEAD^:回退到上一版本</li><li>git reset HEAD~n:回退上n个版本</li><li>git status:查看当前分支状态</li><li>git checkout — <file>:撤销对工作区中file的修改</file></li><li>git reset HEAD <file>:撤销对暂存区中file的修改，撤销后状态回到add之前的状态</file></li><li>git checkout HEAD — <file>:撤销暂存区和工作区中对file的修改，相当于先执行git reset HEAD <file>然后执行git checkout — [file]。撤销后状态回到工作区修改前的状态</file></file></li><li>git rm <file>:从暂存区删除file\</file></li><li>git remote:查看远程仓库信息，加上-v参数可以查看详细信息</li><li>git remote add origin git@github.com:xxxx/xxxx.git:关联远程仓库,origin是默认远程仓库名</li><li>git push -u origin <branch>:推送本地分支到远程分支，-u参数是把本地分支和远程分支关联起来，关联后以后pill或push时可以直接git pull/push</branch></li><li>git clone:克隆远程仓库</li><li>git branch:查看分支</li><li>git branch <branch>:创建分支branch</branch></li><li>git checkout <branch>:切换分支branch</branch></li><li>git checkout -b <branch>:创建+切换分支</branch></li><li>git merge <branch>:合并branch分支到当前分支,合并分支时默认Fast forward模式，这种模式下删除分支后会丢失分支信息，—no-ff参数表示禁用Fast forward会在merge时生成一个新的commit，因为要commit，所以需要加上 -m参数:git merge —no-ff -m “xxx” <branch></branch></branch></li><li>git branch -d <branch>:删除分支branch</branch></li><li>git branch -D <branch>:强行删除未合并的分支</branch></li><li>git checkout -b <branch> origin/<branch>:在本地创建远程分支</branch></branch></li><li>git branch —set-upstream-to=origin/<branch> <branch>:将本地分支与远程分支关联</branch></branch></li><li>git rebase:把分叉的提交历史整理成一条线</li><li>git stash:保存工作现场,在当前分支上还有工作没有commit但又需要修改并提交其他分支的内容时，需要用git stash保存工作现场，否则切换到要修改的分支时工作区不是干净的</li><li>git stash list:查看保存起来的工作</li><li>git stash apply:恢复工作现场但不删除stash内容</li><li>git stash drop:删除stash内容</li><li>git stash pop:恢复工作现场并删除stash内容</li><li>git tag <name>:给分支打标签，默认是打在最新提交的commit上</name></li><li>git tag <name> <commit id>:给对应的commit id打标签</commit></name></li><li>git tag:查看标签列表（按字母顺序排列）</li><li>git show <tagname>:查看标签信息</tagname></li><li>git tag -d <name>:删除标签</name></li><li>git push origin <tagname>:推送本地标签到远程</tagname></li><li>git push origin —tags:推送所有本地标签到远程</li><li>git push origin :refs/tags/<tagname>:删除远程标签（需要首先删除本地）</tagname></li></ul><p>各操作图解如下：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/git/git.png" alt="git"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot整合dubbo</title>
      <link href="/2019/04/02/springboot%E6%95%B4%E5%90%88dubbo/"/>
      <url>/2019/04/02/springboot%E6%95%B4%E5%90%88dubbo/</url>
      
        <content type="html"><![CDATA[<p>这两天参考各种资料在做springboot整合dubbo，这里记录下。<br>整个工程由dubbo-provider和dubbo-consumer两个模块构成，完整目录如下：<br>具体步骤：</p><h2 id="1-使用IDEA创建一个空的MAVEN项目"><a href="#1-使用IDEA创建一个空的MAVEN项目" class="headerlink" title="1.使用IDEA创建一个空的MAVEN项目"></a>1.使用IDEA创建一个空的MAVEN项目</h2><a id="more"></a><p><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringBoot%E6%95%B4%E5%90%88Dubbo/20190226154346930.png" alt="创建空的MAVEN项目"><br>项目创建完成后，删除src目录，在pom.xml中添加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>  完整pom文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaobai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="2-创建dubbo-provider子模块"><a href="#2-创建dubbo-provider子模块" class="headerlink" title="2.创建dubbo-provider子模块"></a>2.创建dubbo-provider子模块</h2><p>新建模块<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringBoot%E6%95%B4%E5%90%88Dubbo/20190226155523114.png" alt="创建dubbo-provider子模块"><br>选择Spring Intializr<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringBoot%E6%95%B4%E5%90%88Dubbo/20190226155548839.png" alt="创建dubbo-provider子模块"><br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringBoot%E6%95%B4%E5%90%88Dubbo/20190226165215783.png" alt="创建dubbo-provider子模块"><br>选择web(这里需要注意，如果不创建web工程的话整个dubbo-provider工程运行完就会退出)<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringBoot%E6%95%B4%E5%90%88Dubbo/20190226155738941.png" alt="创建dubbo-provider子模块"><br>在pom文件中添加dubbo-springboot依赖和zookeeper依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--dubbo-springBoot依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--zookeeper依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>dubbo-provider模块完整pom文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaobai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--dubbo-springBoot依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--zookeeper依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>修改dubbo-provider模块的application.properties配置文件内容为(我习惯用yml文件,因此这里用的是application.yml):<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  dubbo:</span></span><br><span class="line"><span class="attr">    application:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">dubbo-provider</span></span><br><span class="line"><span class="attr">    registry:</span></span><br><span class="line"><span class="attr">      address:</span> <span class="attr">zookeeper://x.x.x.x:2181</span></span><br><span class="line"><span class="attr">    protocol:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">dubbo</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">20880</span></span><br></pre></td></tr></table></figure></p><p>其中<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">registry:</span></span><br><span class="line"><span class="attr">  address:</span> <span class="attr">zookeeper://x.x.x.x:2181</span></span><br></pre></td></tr></table></figure></p><p>是zookeeper的ip和端口，如果安装在本地，那么127.0.0.1:2181就可以；<br>接下来给dubbo-provider模块的入口类添加@EnableDubboConfiguration注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.xiaobai.dubbo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.spring.boot.annotation.EnableDubboConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubboConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DubboApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在com.xiaobai.dubbo.service下新建接口DubboProviderService.java:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.dubbo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DubboProviderService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">provider</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在com.xiaobai.dubbo.service.Impl下新建接口的实现类DubboProviderImpl.java:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.xiaobai.dubbo.service.Impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.xiaobai.dubbo.service.DubboProviderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboProviderImpl</span> <span class="keyword">implements</span> <span class="title">DubboProviderService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">provider</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里要注意@Service注解使用的是com.alibaba.dubbo.config.annotation.Service，作用是把服务类暴露出去。</p><h2 id="3-创建dubbo-consumer模块"><a href="#3-创建dubbo-consumer模块" class="headerlink" title="3.创建dubbo-consumer模块"></a>3.创建dubbo-consumer模块</h2><p>按照同样的方法新建dubbo-consumer模块。<br>dubbo-consumer模块的pom文件中需要额外添加thymeleaf依赖，以实现动态页面的访问：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>dubbo-consumer模块完整的pom文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaobai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--dubbo-springBoot依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--zookeeper依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>dubbo-consumer模块的application.yml配置文件内容如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  dubbo:</span></span><br><span class="line"><span class="attr">    application:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">dubbo-consumer</span></span><br><span class="line"><span class="attr">    registry:</span></span><br><span class="line"><span class="attr">      address:</span> <span class="attr">zookeeper://x.x.x.x:2181</span></span><br><span class="line"><span class="attr">    protocol:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">dubbo</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">20880</span></span><br></pre></td></tr></table></figure></p><p>这里将端口改为80是为了防止和dubbo-provider模块冲突。<br>入口类同样需要添加@EnableDubboConfiguration注解。<br>然后在com.xiaobai.dubbo.service下新建接口DubboProviderService.java：<br>package com.xiaobai.dubbo.service;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DubboProviderService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">provider</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在com.xiaobai.dubbo.controller下新建ConsumerController.java：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.dubbo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.xiaobai.dubbo.service.DubboProviderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> DubboProviderService dubboProviderService;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/consumer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">consumer</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        String message = dubboProviderService.provider(<span class="string">"xiaobai"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"message"</span>,message);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"consumer"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意@Reference注解使用的是com.alibaba.dubbo.config.annotation.Reference，作用是调用dubbo-provider的服务。<br>接下来在resources/templates下新建consumer.html：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;message&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后启动dubbo-provider模块的启动类，再启动dubbo-consumer模块的启动类，查看dobbo-admin控制台：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringBoot%E6%95%B4%E5%90%88Dubbo/201902261716004.png" alt="dobbo-admin控制台"><br>提供者和消费者均注册成功，此时访问<a href="http://localhost/consumer会看到" target="_blank" rel="noopener">http://localhost/consumer会看到</a><br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringBoot%E6%95%B4%E5%90%88Dubbo/20190226171640776.png" alt="运行结果"><br>至此springboot和dubbo整合完成。<br>完整的代码以上传到github:<br><a href="https://github.com/3ylh3/springboot-dubbo.git" target="_blank" rel="noopener">https://github.com/3ylh3/springboot-dubbo.git</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud实现简单服务发现调用</title>
      <link href="/2019/04/02/SpringCloud%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E8%B0%83%E7%94%A8/"/>
      <url>/2019/04/02/SpringCloud%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>使用eureka实现服务治理，使用feign实现远程调用。<br>具体实现如下：</p><h2 id="1-创建空的maven项目"><a href="#1-创建空的maven项目" class="headerlink" title="1.创建空的maven项目"></a>1.创建空的maven项目</h2><p>使用IDEA创建空的maven项目，创建完后删除src目录，修改pom文件内容如下：<br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaobai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">module</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">module</span>&gt;</span>provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">module</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="2-创建eureka-server注册中心模块"><a href="#2-创建eureka-server注册中心模块" class="headerlink" title="2.创建eureka-server注册中心模块"></a>2.创建eureka-server注册中心模块</h2><p>新建模块：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloud%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/20190228154453293.png" alt="创建eureka-server注册中心模块"><br>选择Spring Initializr创建spring boot工程：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloud%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/20190228151856361.png" alt="创建eureka-server注册中心模块"><br>选择Eureka Server:<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloud%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/20190228152003238.png" alt="创建eureka-server注册中心模块"><br>创建完成后修改pom文件parent节点为父项目的groupId、artifactId以及version，完整的pom文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaobai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaobai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eurekaserver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>eurekaserver<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>修改application.yml配置文件：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure></p><p>其中registerWithEureka: false和fetchRegistry: false是关闭本服务的客户端行为，即不把本服务注册到注册中心。<br>给启动类添加@EnableEurekaServer注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.eurekaserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaserverApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaserverApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行启动类，访问<a href="http://localhost:8761/会看到" target="_blank" rel="noopener">http://localhost:8761/会看到</a><br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloud%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/20190228154051813.png" alt="运行结果"><br>No instances available代表没有服务注册。</p><h2 id="3-创建provider服务提供者模块"><a href="#3-创建provider服务提供者模块" class="headerlink" title="3.创建provider服务提供者模块"></a>3.创建provider服务提供者模块</h2><p>新建模块：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloud%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/20190228154453293.png" alt="创建provider服务提供者模块"><br>选择Spring Initializr创建spring boot工程：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloud%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/20190228151856361.png" alt="创建provider服务提供者模块"><br>选择web和Eureka Discovery创建eureka-client web工程：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloud%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/20190228154617262.png" alt="创建provider服务提供者模块"><br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloud%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/2019022815463168.png" alt="创建provider服务提供者模块"><br>修改pom文件parent节点为父项目的groupId、artifactId以及version，完整的pom文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaobai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaobai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>provider<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>修改application.yml配置文件：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">provider</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure></p><p>其中<a href="http://localhost:8761是eureka-server注册中心部署的ip和端口，由于我是在本地测试，所以就是localhost:8761。" target="_blank" rel="noopener">http://localhost:8761是eureka-server注册中心部署的ip和端口，由于我是在本地测试，所以就是localhost:8761。</a><br>给启动类加上@EnableEurekaClient注解:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在com.xiaobai.provider.service下新建SayHelloService接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.provider.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SayHelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在com.xiaobai.provider.service.Impl下新建接口的实现类SayHelloImpl:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.provider.service.Impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaobai.provider.service.SayHelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SayHelloImpl</span> <span class="keyword">implements</span> <span class="title">SayHelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name + <span class="string">"!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在com.xiaobai.provider.controller下新建ProviderController:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.provider.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaobai.provider.service.SayHelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SayHelloService sayHelloService;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sayHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sayHelloService.sayHello(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动provider项目，刷新<a href="http://localhost:8761/页面查看provider服务注册成功：" target="_blank" rel="noopener">http://localhost:8761/页面查看provider服务注册成功：</a><br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloud%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/20190228165629403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0NzMwNjc=,size_16,color_FFFFFF,t_70" alt="运行结果"></p><h2 id="3-创建consumer模块"><a href="#3-创建consumer模块" class="headerlink" title="3.创建consumer模块"></a>3.创建consumer模块</h2><p>新建模块：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloud%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/20190228154453293.png" alt="创建consumer模块"><br>选择Spring Initializr创建spring boot工程：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloud%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/20190228151856361.png" alt="创建consumer模块"><br>选择web、Eureka Discovery和Feign:<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloud%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/20190228165916502.png" alt="创建consumer模块"><br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloud%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/20190228170116134.png" alt="创建consumer模块"><br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloud%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/20190228165939578.png" alt="创建consumer模块"><br>修改pom文件parent节点为父项目的groupId、artifactId以及version，完整的pom文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaobai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaobai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>修改application.yml配置文件，配置文件内容和provider类似，只需修改一下端口防止冲突：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">consumer</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure></p><p>给启动类加上@EnableEurekaClient和@EnableFeignClients注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在com.xiaobai.consumer.service下新建SayHelloService接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.consumer.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"provider"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SayHelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sayHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中 @FeignClient(name = “provider”)注解中name是provider服务的服务名（ 配置文件配置的spring:application:name ）,@RequestMapping注解的值是在provider服务中ProviderController配置的映射。<br>在com.xiaobai.consumer.controller包下新建ConsumerController:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaobai.consumer.service.SayHelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SayHelloService sayHelloService;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sayHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sayHelloService.sayHello(<span class="string">"xiaobai"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动consumer服务，刷新<a href="http://localhost:8761/，看到consumer服务也注册成功：" target="_blank" rel="noopener">http://localhost:8761/，看到consumer服务也注册成功：</a><br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloud%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/20190228172110143.png" alt="运行结果"><br>此时访问<a href="http://localhost/sayHello就会看到调用成功：" target="_blank" rel="noopener">http://localhost/sayHello就会看到调用成功：</a><br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloud%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/20190228172218909.png" alt="运行结果"></p><p>完整的项目代码已上传github:<a href="https://github.com/3ylh3/spring-cloud" target="_blank" rel="noopener">https://github.com/3ylh3/spring-cloud</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloudAlibaba实现服务配置管理和动态服务发现（使用Nacos）</title>
      <link href="/2019/04/02/SpringCloudAlibaba%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%92%8C%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%EF%BC%88%E4%BD%BF%E7%94%A8Nacos%EF%BC%89/"/>
      <url>/2019/04/02/SpringCloudAlibaba%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%92%8C%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%EF%BC%88%E4%BD%BF%E7%94%A8Nacos%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>2018年10月31日，Spring Cloud 发布了 Spring Cloud Alibaba的首个版本，它是由一些阿里巴巴的开源组件和云产品组成的,主要功能有（官方介绍）：</p><ul><li><strong>服务限流降级</strong>：默认支持 Servlet、Feign、RestTemplate、Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</li><li><strong>服务注册与发现</strong>：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</li><li><strong>分布式配置管理</strong>：支持分布式系统中的外部化配置，配置更改时自动刷新。</li><li><strong>消息驱动能力</strong>：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</li><li><strong>分布式事务</strong>：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。</li><li><strong>阿里云对象存储</strong>：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li><strong>分布式任务调度</strong>：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。</li><li><strong>阿里云短信服务</strong>：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。<br>本文分两部分来介绍通过Nacos实现配置管理和动态服务发现。<a id="more"></a><h2 id="一、配置管理"><a href="#一、配置管理" class="headerlink" title="一、配置管理"></a>一、配置管理</h2><h3 id="1-安装Naocs-Linux环境"><a href="#1-安装Naocs-Linux环境" class="headerlink" title="1.安装Naocs(Linux环境)"></a>1.安装Naocs(Linux环境)</h3>首先下载Nacos压缩包：<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases</a> ,下载后使用tar命令解压，进入bin目录，运行下面命令启动：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure></li></ul><p>然后访问http:/x.x.x.x:8848/nacos/index.html(x.x.x.x为安装服务器)，输入用户名密码（默认都是nacos），登录后看到：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloudAlibaba/20190304174812185.png" alt="nacos"><br>至此Nacos安装成功。</p><h3 id="2-实现动态配置管理"><a href="#2-实现动态配置管理" class="headerlink" title="2. 实现动态配置管理"></a>2. 实现动态配置管理</h3><p>首先在Nacos新增配置，点击+号：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloudAlibaba/20190304175048811.png" alt="nacos"><br>填写Data Id、Group和内容，配置格式选择YAML。<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloudAlibaba/20190304175143790.png" alt="nacos"><br>其中Data Id的完整格式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;prefix&#125;-$&#123;spring.profile.active&#125;.$&#123;file-extension&#125;</span><br></pre></td></tr></table></figure></p><p>prefix 默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置。<br>spring.profile.active 即为当前环境对应的 profile，注意：当 spring.profile.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 <code>${prefix}.${file-extension}</code><br>file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。<br>配置完成后使用IDEA新建空的maven项目，创建完后删除src目录，修改pom文件内容如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaobai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">module</span>&gt;</span>config-client<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">module</span>&gt;</span>service-discovery<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>新建config-client模块，选择Spring Initializr创建Spring Boot工程，依赖选择：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloudAlibaba/20190304180745749.png" alt="新建config-client模块"><br>创建完成后修改pom文件parent节点并添加依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>完整pom文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaobai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaobai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>config-client<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>修改配置文件名称为bootstrap.yml(或bootstrap.properties，需要注意要获取Nacos配置的属性必须使用bootstrap)，修改内容为：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8880</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">config-client</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="string">x.x.x.x:8848</span></span><br><span class="line"><span class="attr">        group:</span> <span class="string">xiaobai</span></span><br><span class="line"><span class="attr">        file-extension:</span> <span class="string">yml</span></span><br></pre></td></tr></table></figure></p><p>其中spring.application.name以及file-extension需要和配置的Data Id中对应（config-client.yml），group需要和配置的Group对应(xiaobai)，server-addr是Nacos的安装地址。<br>给启动类添加@RefreshScope注解实现配置自动更新:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.configclient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在con.xiaobai.configclient.controller下编写ConfigController:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.configclient.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;message&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/config"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">config</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用@Value注解来获取配置文件中的message，启动工程，访问<a href="http://localhost:8880/config可以看到成功获取到message" target="_blank" rel="noopener">http://localhost:8880/config可以看到成功获取到message</a>:<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloudAlibaba/20190305093501265.png" alt="运行结果"></p><h2 id="二、服务发现-使用FeignClient调用"><a href="#二、服务发现-使用FeignClient调用" class="headerlink" title="二、服务发现(使用FeignClient调用)"></a>二、服务发现(使用FeignClient调用)</h2><h3 id="创建服务提供者"><a href="#创建服务提供者" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h3><p>新建service-discovery模块（空的maven项目），创建完成后删除src目录修改pom文件内容如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaobai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">module</span>&gt;</span>service-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">module</span>&gt;</span>service-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在service-discovery模块再创建service-provider子模块，选择Spring Initializr创建Spring Boot工程，依赖选择：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloudAlibaba/2019030509431343.png" alt="创建service-provider子模块"><br>创建完成后修改pom文件parent节点并添加Spring Cloud依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>和nacaos-discovery依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>完整pom文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaobai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaobai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>service-provider<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>修改application.yml(application.properties)配置文件:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">service-provider</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="string">x.x.x.x:8848</span></span><br></pre></td></tr></table></figure></p><p>server-addr是nacos注册中心的地址。<br>启动类添加@EnableDiscoveryClient注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.serviceprovider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServiceProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在com.xiaobai.serviceprovider.service下新建SayHelloService接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.serviceprovider.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SayHelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在com.xiaobai.serviceprovider.service.Impl下新建接口的实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.serviceprovider.service.Impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaobai.serviceprovider.service.SayHelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SayHelloImpl</span> <span class="keyword">implements</span> <span class="title">SayHelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name + <span class="string">"!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>在com.xiaobai.serviceprovider.controller下新建SayHelloController:</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.serviceprovider.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaobai.serviceprovider.service.SayHelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SayHelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SayHelloService sayHelloService;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sayHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sayHelloService.sayHello(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，查看nacos服务管理中已经注册成功：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloudAlibaba/20190305102753436.png" alt="运行结果"></p><h3 id="创建服务消费者"><a href="#创建服务消费者" class="headerlink" title="创建服务消费者"></a>创建服务消费者</h3><p>在service-discovery模块再创建service-consumer子模块，选择Spring Initializr创建Spring Boot工程，依赖选择：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloudAlibaba/20190305103016412.png" alt="创建service-consumer子模块"><br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloudAlibaba/20190305103031980.png" alt="创建service-consumer子模块"><br>创建完成后修改pom文件parent节点并添加nacos-discovery依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>完整pom文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaobai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaobai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>service-consumer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>修改application.yml(application.properties)配置文件:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">service-consumer</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="string">x.x.x.x:8848</span></span><br></pre></td></tr></table></figure></p><p>启动类添加@EnableDiscoveryClient和@EnableFeignClients注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.serviceconsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServiceConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在com.xiaobai.serviceconsumer.service下新建接口SayHelloService:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.serviceconsumer.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"service-provider"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SayHelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sayHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在com.xiaobai.serviceconsumer.controller下新建TestController：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaobai.serviceconsumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaobai.serviceconsumer.service.SayHelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SayHelloService sayHelloService;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sayHelloService.sayHello(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动项目，查看nacos服务管理，看到消费者已经注册成功：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloudAlibaba/20190305104116656.png" alt="运行结果"><br>访问<a href="http://localhost/test?name=xiaobai看到成功调用到service-provider的服务：" target="_blank" rel="noopener">http://localhost/test?name=xiaobai看到成功调用到service-provider的服务：</a><br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/SpringCloudAlibaba/20190305104214440.png" alt="运行结果"></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实现红黑树</title>
      <link href="/2019/03/28/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
      <url>/2019/03/28/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="红黑树简单介绍"><a href="#红黑树简单介绍" class="headerlink" title="红黑树简单介绍"></a>红黑树简单介绍</h2><p>红黑树是一种特殊的二叉查找树，它具有以下几点特性：</p><ol><li>每个节点只有一种颜色，黑色或红色。</li><li>根节点是黑色。</li><li>叶子节点是黑色。（这里的叶子节点是指空节点）</li><li>如果一个节点是红色的，那么它的子节点都是黑色的。</li><li>从一个节点到该节点的子孙叶子节点的所有路径上包含相同数目的黑色节点<a id="more"></a>红黑树定义：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedAndBlackTree</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 红黑树节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        <span class="comment">//父节点</span></span><br><span class="line">        <span class="keyword">private</span> TreeNode parent;</span><br><span class="line">        <span class="comment">//左孩子</span></span><br><span class="line">        <span class="keyword">private</span> TreeNode leftChild;</span><br><span class="line">        <span class="comment">//右孩子</span></span><br><span class="line">        <span class="keyword">private</span> TreeNode rightChild;</span><br><span class="line">        <span class="comment">//节点值</span></span><br><span class="line">        <span class="keyword">private</span> E value;</span><br><span class="line">        <span class="comment">//颜色</span></span><br><span class="line">        <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 无参构造函数，默认初始化颜色为红色</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.color = <span class="string">"red"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 有参构造函数</span></span><br><span class="line"><span class="comment">         * 默认初始化颜色为红色</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> parent 父节点</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> leftChild 左孩子</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> rightChild 右孩子</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> value 节点值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(TreeNode parent,TreeNode leftChild,TreeNode rightChild,E value,String color)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">            <span class="keyword">this</span>.leftChild = leftChild;</span><br><span class="line">            <span class="keyword">this</span>.rightChild = rightChild;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.color = color;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根节点</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="红黑树基本操作"><a href="#红黑树基本操作" class="headerlink" title="红黑树基本操作"></a>红黑树基本操作</h2><h3 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h3><p>假设需要左旋的节点为node,node节点的右孩子为tmpNode,左旋步骤如下：</p><ol><li>如果tmpNode为空，则无需进行任何操作。</li><li>记lchild为tmpNode的左孩子。</li><li>如果lchild不为空，将lchild设为node的右孩子，将lchild的父亲设为node，否则将node的右孩子设为空。</li><li>将node的父亲设为tmpNode的父亲。</li><li>判断如果node的父亲是空，则把tmpNode设为root节点。</li><li>如果node的父亲不为空，且node是它父亲的左孩子，那么将tmpNode设为node父亲的左孩子。</li><li>如果node的父亲不为空，且node是它父亲的右孩子，那么将tmpNode设为node父亲的右孩子。</li><li>将node设为tmpNode的左孩子，将node的父节点设为tmpNode。</li></ol><p>图解如下：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190313165501748.png" alt="左旋"><br>Java代码实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leftRotate</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="comment">//新建tmpNode节点，把node的右孩子赋给tmpNode</span></span><br><span class="line">        TreeNode tmpNode = node.rightChild;</span><br><span class="line">        <span class="keyword">if</span>(tmpNode == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode lchild = tmpNode.leftChild;</span><br><span class="line">        <span class="keyword">if</span>(lchild != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//将tmpNode的左孩子设为node的右孩子</span></span><br><span class="line">            node.rightChild = lchild;</span><br><span class="line">            <span class="comment">//将tmpNode的左孩子的父亲设为node</span></span><br><span class="line">            tmpNode.leftChild.parent = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//将node的右孩子设为空</span></span><br><span class="line">            node.rightChild = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将node的父亲设为tmpNode的父亲</span></span><br><span class="line">        tmpNode.parent = node.parent;</span><br><span class="line">        <span class="comment">//判断如果node的父亲是空，则设tmpNode为root节点</span></span><br><span class="line">        <span class="keyword">if</span>(node.parent == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.root = tmpNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果node是它父亲的左孩子，那么将tmpNode设为node父亲的左孩子</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node == (node.parent.leftChild))&#123;</span><br><span class="line">            node.parent.leftChild = tmpNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则将tmpNode设为node父亲的右孩子</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            node.parent.rightChild = tmpNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将node设为tmpNode的左孩子</span></span><br><span class="line">        tmpNode.leftChild = node;</span><br><span class="line">        <span class="comment">//将node的父节点设为tmpNode</span></span><br><span class="line">        node.parent = tmpNode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h3><p>假设需要右旋的节点为node,node的左孩子为tmpNode,右旋步骤如下：</p><ol><li>如果tmpNode为空，则无需进行任何操作。</li><li>记rchild为tmpNode的右孩子。</li><li>如果rchild不为空，将rchild设为node的左孩子，将rchild的父亲设为node，否则将node的左孩子设为空。</li><li>将node的父亲设为tmpNode的父亲。</li><li>判断如果node的父亲是空，则把tmpNode设为root节点。</li><li>如果node的父亲不为空，且node是它父亲的左孩子，那么将tmpNode设为node父亲的左孩子。</li><li>如果node的父亲不为空，且node是它父亲的右孩子，那么将tmpNode设为node父亲的右孩子。</li><li>将node设为tmpNode的右孩子，将node的父节点设为tmpNode。</li></ol><p>图解如下：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190313171837844.png" alt="右旋"><br>Java代码实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rightRotate</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="comment">//新建tmpNode节点，把node的左孩子赋给tmpNode</span></span><br><span class="line">        TreeNode tmpNode = node.leftChild;</span><br><span class="line">        <span class="keyword">if</span>(tmpNode == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode rchild = tmpNode.rightChild;</span><br><span class="line">        <span class="keyword">if</span>(rchild != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//将tmpNode的右孩子设为node的左孩子</span></span><br><span class="line">            node.leftChild = tmpNode.rightChild;</span><br><span class="line">            <span class="comment">//将tmpNode右孩子的父节点设为node</span></span><br><span class="line">            tmpNode.rightChild.parent = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//将node的左孩子设为空</span></span><br><span class="line">            node.leftChild = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将node的父亲设为tmpNode的父亲</span></span><br><span class="line">        tmpNode.parent = node.parent;</span><br><span class="line">        <span class="comment">//判断如果node的父亲是空，则设tmpNode为root节点</span></span><br><span class="line">        <span class="keyword">if</span>(node.parent == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.root = tmpNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果node是它父亲的左孩子，那么将tmpNode设为node父亲的左孩子</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node == (node.parent.leftChild))&#123;</span><br><span class="line">            node.parent.leftChild = tmpNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则将tmpNode设为node父亲的右孩子</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            node.parent.rightChild = tmpNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将node设为tmpNode的右孩子</span></span><br><span class="line">        tmpNode.rightChild = node;</span><br><span class="line">        <span class="comment">//将node的父节点设为tmpNode</span></span><br><span class="line">        node.parent = tmpNode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="插入新节点"><a href="#插入新节点" class="headerlink" title="插入新节点"></a>插入新节点</h3><h4 id="一、找到插入节点的位置并插入"><a href="#一、找到插入节点的位置并插入" class="headerlink" title="一、找到插入节点的位置并插入"></a>一、找到插入节点的位置并插入</h4><p>具体步骤如下：</p><ol><li>记node为需要插入的节点（默认颜色为红色），index为需要插入的位置（初始化为root节点），parent为index的父节点（初始化为空）。</li><li>如果index为空，则直接将node置为根节点。</li><li>如果index不为空，吧index赋给parent。</li><li>判断node的节点值如果小于index的节点值，则将index置为index的左孩子，继续循环判断，直至index为空；如果大于index节点的值，则将index置为index的右孩子，继续循环判断，直至index为空；如果相等，证明红黑树中已存在该节点，跳出。</li><li><p>此时index为要插入的位置，parent为要插入节点的父节点，将node节点插入。</p><h4 id="二、对插入节点进行调整"><a href="#二、对插入节点进行调整" class="headerlink" title="二、对插入节点进行调整"></a>二、对插入节点进行调整</h4><p>插入节点后，可能会破坏红黑树的规则，因为插入的节点是红色的，所以规则5（从一个节点到该节点的子孙叶子节点的所有路径上包含相同数目的黑色节点）不会被破坏，规则1（每个节点或者是红色，或者是黑色）、规则3（每个叶子节点是黑色，这里的叶子节点是指为空的叶子节点）显然也不会破坏，只可能破坏规则2（根节点是黑色）和规则4（如果一个节点是红的，那么它的子节点必须是黑的）。插入新节点的情况可能有以下三种：</p></li><li><p>插入的是根节点，此时破坏了规则2。</p></li><li>插入节点的父亲节点是黑色，此时没有破坏任何规则，无需进行调整。</li><li>插入节点的父亲节点是红色，此时破坏了规则4。这种情况也有5种子情况：<br>子情况1：父节点是红色，叔叔节点也是红色。<br>子情况2：父节点是红色并且是祖父节点的左孩子，叔叔节点是黑色，并且插入节点是父节点的右孩子。<br>子情况3：父节点是红色并且是祖父节点的左孩子，叔叔节点是黑色，并且插入节点是父节点的左孩子。<br>子情况4：父节点是红色并且是祖父节点的右孩子，叔叔节点是黑色，并且插入节点是父节点的左孩子。<br>子情况5：父节点是红色并且是祖父节点的右孩子，叔叔节点是黑色，并且插入节点是父节点的右孩子。</li></ol><p>破坏规则后，需要对红黑树进行一系列的颜色修改以及旋转，来满足红黑树的规则，记需要调整的节点（当前节点）是node，具体步骤如下：</p><ol><li>如果node节点是root节点，则将颜色变为黑色，否则进行下面的步骤。</li><li>如果node节点的父节点是红色并且是祖父节点的左孩子，叔叔节点也是红色，则将父节点和叔叔节点设为黑色，将祖父节点设为红色，并将祖父节点设为当前节点递归进行调整。</li><li>如果node节点的父节点是红色并且是祖父节点的左孩子，叔叔节点是黑色，并且node节点是父节点的右孩子，则将父节点设为当前节点并进行左旋，然后递归进行调整。</li><li>如果node节点的父节点是红色并且是祖父节点的左孩子，叔叔节点是黑色，并且node节点是父节点的左孩子，则将父节点设为黑色，将祖父节点设为红色并进行右旋。</li><li>如果node节点的父节点是红色并且是祖父节点的右孩子，叔叔节点也是红色，则将父节点和叔叔节点设为黑色，将祖父节点设为红色，并将祖父节点设为当前节点递归进行调整。</li><li>如果node节点的父节点是红色并且是祖父节点的右孩子，叔叔节点是黑色，并且node节点是父节点的左孩子，则将父节点设为当前节点并进行右旋，然后递归进行调整。</li><li><p>如果node节点的父节点是红色并且是祖父节点的右孩子，叔叔节点是黑色，并且node节点是父节点的右孩子，则将父节点设为黑色，将祖父节点设为红色并进行左旋。</p><p>子情况1（父节点是红色，叔叔节点也是红色）图解， 5是插入节点（当前节点），：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314101704714.png" alt="插入调整"><br>调整后（按步骤2和5调整）如下，20为当前节点：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314101828404.png" alt="插入调整"><br>对当前节点递归调整（按照步骤1调整）后满足红黑树条件：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314103800288.png" alt="插入调整"><br>子情况2（父节点是红色并且是祖父节点的左孩子，叔叔节点是黑色（空的叶子节点），并且插入节点是父节点的右孩子）图解，15为插入节点：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314103126334.png" alt="插入调整"><br>调整（按步骤3调整）后如下，此时10是当前节点：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314103357742.png" alt="插入调整"><br>对当前节点进行递归调整后满足红黑树条件（这种其实是子情况3，按照步骤4调整）：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314103651449.png" alt="插入调整"><br>子情况4图解（子情况3上面已经描述，不再赘述），插入节点是25：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314103917223.png" alt="插入调整"><br>调整后（按照步骤6调整）如下，此时当前节点是30：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314104100479.png" alt="插入调整"><br>递归调整（这种其实是子情况6，按照步骤7调整）后如下，满足红黑树条件：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314104225580.png" alt="插入调整"><br>完整的Java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 插入新节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 要插入节点的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(E value)</span></span>&#123;</span><br><span class="line">    TreeNode node = <span class="keyword">new</span> TreeNode(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,value,<span class="string">"red"</span>);</span><br><span class="line">    TreeNode index = <span class="keyword">this</span>.root;</span><br><span class="line">    TreeNode parent = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//寻找插入位置</span></span><br><span class="line">    <span class="keyword">if</span>(index == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.root = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(index != <span class="keyword">null</span>)&#123;</span><br><span class="line">            parent = index;</span><br><span class="line">            <span class="keyword">if</span>(value.compareTo(index.value) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                index = index.leftChild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(value.compareTo(index.value) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                index = index.rightChild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将node的parent设为parent</span></span><br><span class="line">        node.parent = parent;</span><br><span class="line">        <span class="comment">//如果value小于parent的节点值，则将node置为parent的左孩子，否则置为右孩子</span></span><br><span class="line">        <span class="keyword">if</span>(value.compareTo(parent.value) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            parent.leftChild = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            parent.rightChild = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行调整</span></span><br><span class="line">    insertAdjust(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增节点后调整</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 需要调整的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAdjust</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果节点为根节点，则将节点颜色变为黑色</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.root == node)&#123;</span><br><span class="line">        <span class="keyword">this</span>.root.color = <span class="string">"black"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果当前节点的父节点颜色为红色</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(node.parent != <span class="keyword">null</span> &amp;&amp; node.parent.color.equals(<span class="string">"red"</span>))&#123;</span><br><span class="line">        <span class="comment">//如果父节点是左孩子</span></span><br><span class="line">        <span class="keyword">if</span>(node.parent.parent != <span class="keyword">null</span> &amp;&amp; node.parent == node.parent.parent.leftChild)&#123;</span><br><span class="line">            <span class="comment">//将tmpNode设为当前节点的叔叔节点</span></span><br><span class="line">            TreeNode tmpNode = node.parent.parent.rightChild;</span><br><span class="line">            <span class="comment">//如果叔叔节点是红色</span></span><br><span class="line">            <span class="keyword">if</span>(tmpNode != <span class="keyword">null</span> &amp;&amp; tmpNode.color.equals(<span class="string">"red"</span>))&#123;</span><br><span class="line">                <span class="comment">//将父节点设为黑色</span></span><br><span class="line">                node.parent.color = <span class="string">"black"</span>;</span><br><span class="line">                <span class="comment">//将叔叔节点设为黑色</span></span><br><span class="line">                tmpNode.color = <span class="string">"black"</span>;</span><br><span class="line">                <span class="comment">//将祖父节点设为红色</span></span><br><span class="line">                tmpNode.parent.color = <span class="string">"red"</span>;</span><br><span class="line">                <span class="comment">//将祖父节点设为当前节点</span></span><br><span class="line">                node = tmpNode.parent;</span><br><span class="line">                insertAdjust(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果叔叔节点是黑色，而且当前节点是右孩子</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(node == node.parent.rightChild)&#123;</span><br><span class="line">                <span class="comment">//将父节点设为当前节点，并进行左旋</span></span><br><span class="line">                node = node.parent;</span><br><span class="line">                leftRotate(node);</span><br><span class="line">                <span class="comment">//接着进行调整</span></span><br><span class="line">                insertAdjust(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果叔叔节点是黑色，而且当前节点是左孩子</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//将父节点设为黑色</span></span><br><span class="line">                node.parent.color = <span class="string">"black"</span>;</span><br><span class="line">                <span class="comment">//将祖父节点设为红色</span></span><br><span class="line">                node.parent.parent.color = <span class="string">"red"</span>;</span><br><span class="line">                <span class="comment">//将祖父节点进行右旋</span></span><br><span class="line">                rightRotate(node.parent.parent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node.parent.parent != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//将tmpNode设为当前节点的叔叔节点</span></span><br><span class="line">            TreeNode tmpNode = node.parent.parent.leftChild;</span><br><span class="line">            <span class="comment">//如果叔叔节点是红色</span></span><br><span class="line">            <span class="keyword">if</span>(tmpNode != <span class="keyword">null</span> &amp;&amp; tmpNode.color.equals(<span class="string">"red"</span>))&#123;</span><br><span class="line">                <span class="comment">//将父节点设为黑色</span></span><br><span class="line">                node.parent.color = <span class="string">"black"</span>;</span><br><span class="line">                <span class="comment">//将叔叔节点设为黑色</span></span><br><span class="line">                tmpNode.color = <span class="string">"black"</span>;</span><br><span class="line">                <span class="comment">//将祖父节点设为红色</span></span><br><span class="line">                tmpNode.parent.color = <span class="string">"red"</span>;</span><br><span class="line">                <span class="comment">//将祖父节点设为当前节点</span></span><br><span class="line">                node = tmpNode.parent;</span><br><span class="line">                insertAdjust(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果叔叔节点是黑色，而且当前节点是左孩子</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(node == node.parent.leftChild)&#123;</span><br><span class="line">                <span class="comment">//将父节点设为当前节点，并进行右旋</span></span><br><span class="line">                node = node.parent;</span><br><span class="line">                rightRotate(node);</span><br><span class="line">                <span class="comment">//接着进行调整</span></span><br><span class="line">                insertAdjust(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果叔叔节点是黑色，而且当前节点是右孩子</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//将父节点设为黑色</span></span><br><span class="line">                node.parent.color = <span class="string">"black"</span>;</span><br><span class="line">                <span class="comment">//将祖父节点设为红色</span></span><br><span class="line">                node.parent.parent.color = <span class="string">"red"</span>;</span><br><span class="line">                <span class="comment">//将祖父节点进行左旋</span></span><br><span class="line">                leftRotate(node.parent.parent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><h4 id="一、按照二叉查找树的规则将节点删除"><a href="#一、按照二叉查找树的规则将节点删除" class="headerlink" title="一、按照二叉查找树的规则将节点删除"></a>一、按照二叉查找树的规则将节点删除</h4><p>删除节点的情况有以下三种：</p><p> 情况1. 要删除的是叶子节点，此时直接删除就可以。<br> 情况2. 要删除的节点只有一个孩子，此时用孩子顶替它即可。<br> 情况3. 要删除的节点有两个孩子，此时需要找出它的代替节点，将代替节点的值赋给要删除的节点，然后将代替节点删除即可。代替节点为要删除节点的右子树上最小的节点，即为要删除节点的右孩子的左孩子的左孩子的左孩子…..。由此可知代替节点要么只有一个右孩子，要么没有孩子，不可能有左孩子，所以对代替节点的删除可以转化为情况1和2。<br>假设需要删除的节点为node，代替节点为replace（replace只可能只有一个左孩子、或者只有一个右孩子、或者没有孩子）,具体步骤如下：</p><ol><li>如果node的左右孩子均不为空，则将replace设为node的右孩子，如果replace的左孩子不为空，循环操作将replace设为它的左孩子。</li><li>如果node的只有一个孩子或者没有孩子，则将replace设为node。</li><li>如果replace没有孩子，则判断是否为根节点，如果是根节点，则直接置空跳出；如果不是根节点并且是它父亲的左孩子，那么新建空的叶子节点tmpNode，将它父亲的左孩子设为tmpNode；如果不是根节点并且是它父亲的右孩子，那么新建空的叶子节点tmpNode，将它父亲的右孩子设为tmpNode。</li><li>如果replace左孩子不为空，则将tmpNode置为它的左孩子，用tmpNode代替replace，如果replace是root节点，则将tmpNode设为root节点。</li><li>如果replace右孩子不为空，则将tmpNode置为它的右孩子，用tmpNode代替replace，如果replace是root节点，则将tmpNode设为root节点。</li><li><p>如果replace的节点值不等于node的节点值，则将replace的节点值赋给node。</p><p>删除完后，如果replace是黑色节点时可能会破坏红黑树的规则，因此需要对tmpNode进行调整。</p><h4 id="二、删除节点后调整"><a href="#二、删除节点后调整" class="headerlink" title="二、删除节点后调整"></a>二、删除节点后调整</h4><p>删除节点后具体有以下几种情况：</p></li><li>待调整节点是红色节点，此时将待调整节点设为黑色即可。</li><li>待调整节点是黑色节点并且是根节点，此时不用进行调整。</li><li>待调整节点是黑色节点并且不是根节点，此时需要进行调整。这种情况又分为以下几种子情况：<br>子情况1：待调整节点是父亲的左孩子，并且兄弟节点是红色。<br>子情况2：待调整节点是父亲的左孩子，并且兄弟节点是黑色，兄弟节点的两个孩子都是黑色。<br>子情况3：待调整节点是父亲的左孩子，并且兄弟节点是黑色，兄弟节点的左孩子是红色，右孩子是黑色。<br>子情况4：待调整节点是父亲的左孩子，并且兄弟节点是黑色，兄弟节点的右孩子是红色。<br>子情况5：待调整节点是父亲的右孩子，并且兄弟节点是红色。<br>子情况6：待调整节点是父亲的右孩子，并且兄弟节点是黑色，兄弟节点的两个孩子都是黑色。<br>子情况7：待调整节点是父亲的右孩子，并且兄弟节点是黑色，兄弟节点的右孩子是红色，左孩子是黑色。<br>子情况8：待调整节点是父亲的右孩子，并且兄弟节点是黑色，兄弟节点的左孩子是红色。</li></ol><p>假设node节点是待调整节点，tmpNode节点（和第一步删除时的tmpNode不是同一节点，注意区分）是node节点的兄弟节点，具体调整步骤如下：</p><ol><li>如果node节点是红色的，则将颜色变为黑色，否则继续下面步骤。</li><li>如果node节点是黑色的而且不是根节点，判断node节点是它父亲的左孩子还是右孩子</li><li>如果node是左孩子，tmpNode是红色的，则将tmpNode设为黑色，将node的父亲设为红色，将node的父亲左旋，重新将tmpNode设为node的兄弟节点继续下面步骤。</li><li>如果node是左孩子，tmpNode是黑色的，而且tmpNode的两个孩子（包含空叶子节点）都是黑色的，则将tmpNode设为红色，递归调整node的父节点。</li><li>如果node是左孩子，tmpNode是黑色的，而且tmpNode的左孩子是红色的，右孩子是黑色的，则将tmpNode的左孩子变为黑色，将tmpNode变为红色，将tmpNode右旋，重新将tmpNode设为node的兄弟节点，继续下面步骤。</li><li>如果node是左孩子，tmpNode是黑色的，而且tmpNode的右孩子是红色，则将node父节点的颜色赋给tmpNode，将node父节点设为黑色，将tmpNode右孩子设为黑色，将node的父亲左旋。</li><li>如果node是右孩子，tmpNode是红色的，则将tmpNode设为黑色，将node的父亲设为红色，将node的父亲右旋，重新将tmpNode设为node的兄弟节点继续下面步骤。</li><li>如果node是右孩子，tmpNode是黑色的，而且tmpNode的两个孩子都是黑色的，则将tmpNode设为红色，递归调整node的父节点。</li><li>如果node是右孩子，tmpNode是黑色的，而且tmpNode的右孩子是红色的，左孩子是黑色的，则将tmpNode的右孩子变为黑色，将tmpNode变为红色，将tmpNode左旋，重新将tmpNode设为node的兄弟节点，继续下面步骤。</li><li>如果node是右孩子，tmpNode是黑色的，而且tmpNode的左孩子是红色，则将node父节点的颜色赋给tmpNode，将node父节点设为黑色，将tmpNode左孩子设为黑色，将node的父亲右旋。</li></ol><p>子情况1图解，已经删除的节点是20的左孩子（被空的叶子节点取代），需要调整的（当前节点）是20的左孩子（空的叶子节点）：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314144744647.png" alt="删除调整"><br>调整（按照步骤3调整）后如下，此时当前节点的兄弟节点是25：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314145025255.png" alt="删除调整"><br>继续进行步骤3之后的步骤，此时其实是子情况2，继续调整（按照步骤4调整）后如下：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314150245957.png" alt="删除调整"><br>对父节点20进行递归调整后如下，满足红黑树规则：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314150521332.png" alt="删除调整"><br>子情况3（子情况2前面已经描述过，这里不再赘述）图解如下，已经删除的节点是20的左孩子，需要调整的节点是20的左孩子（空叶子节点）:<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314152422158.png" alt="删除调整"><br>调整（按照步骤5）后如下，此时当前节点的兄弟节点是25：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314153928195.jpg" alt="删除调整"><br>继续进行步骤5之后的步骤，这时实际上是子情况4，调整（按照步骤6）后如下，满足红黑树规则：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314154737754.png" alt="删除调整"><br>子情况5（子情况4前面已经描述过，这里不再赘述）图解，已经删除的节点是20的右孩子，需要调整的节点是20的右孩子（空叶子节点）：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314155234787.png" alt="删除调整"><br>调整（按照步骤7）后如下，此时当前节点的兄弟节点是15：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314155348344.png" alt="删除调整"><br>继续步骤7之后的步骤，此时其实是子情况6,继续调整（按照步骤8）后如下：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314155923441.png" alt="删除调整"><br>递归调整父节点20后如下，满足红黑树规则：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314155955492.png" alt="删除调整"><br>子情况7（子情况6前面已经描述过，这里不再赘述）图解，已经删除的节点是20的右孩子，需要调整的节点是20的右孩子（空的叶子节点）：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314160551543.png" alt="删除调整"><br>调整（按照步骤9）后如下，此时当前节点的兄弟为15：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/2019031416070444.png" alt="删除调整"><br>继续步骤9之后的步骤，此时其实是子情况8，继续调整（按照步骤10）后如下，满足红黑树规则：<br><img src="https://xiaobai-picture.oss-cn-beijing.aliyuncs.com/Java%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91/20190314160832196.png" alt="删除调整"><br>调整完后判断调整的节点是不是空的叶子节点，如果是则将它删除。<br>完整的删除代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 删除节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 需要删除的节点值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E value)</span></span>&#123;</span><br><span class="line">    <span class="comment">//查找要删除的节点</span></span><br><span class="line">    TreeNode node = search(<span class="keyword">this</span>,value);</span><br><span class="line">    <span class="comment">//如果node的左孩子和右孩子都不为空，则寻找node的后继结点(右子树的最小节点)，将后继结点赋给replace</span></span><br><span class="line">    TreeNode replace = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(node.leftChild != <span class="keyword">null</span> &amp;&amp; node.rightChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">        replace = node.rightChild;</span><br><span class="line">        <span class="keyword">while</span> (replace.leftChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">            replace = replace.leftChild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        replace = node;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode tmpNode = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//如果replace为叶子节点，则直接删除</span></span><br><span class="line">    <span class="keyword">if</span>(replace.leftChild == <span class="keyword">null</span> &amp;&amp; replace.rightChild == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//如果replace为根节点，则直接置空</span></span><br><span class="line">        <span class="keyword">if</span>(replace == <span class="keyword">this</span>.root)&#123;</span><br><span class="line">            <span class="keyword">this</span>.root = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//用tmpNode空叶子节点代替replace节点，否则调整会报空指针</span></span><br><span class="line">            tmpNode = <span class="keyword">new</span> TreeNode(replace.parent,<span class="keyword">null</span>,<span class="keyword">null</span>,(E)<span class="string">"*"</span>,<span class="string">"black"</span>);</span><br><span class="line">            <span class="keyword">if</span> (replace == replace.parent.leftChild) &#123;</span><br><span class="line">                replace.parent.leftChild = tmpNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                replace.parent.rightChild = tmpNode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果replace左子树不为空，则用replace左子树替代replace</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (replace.leftChild != <span class="keyword">null</span>)&#123;</span><br><span class="line">        tmpNode = replace.leftChild;</span><br><span class="line">        <span class="keyword">if</span>(replace == <span class="keyword">this</span>.root)&#123;</span><br><span class="line">            <span class="keyword">this</span>.root = tmpNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(replace == replace.parent.leftChild)&#123;</span><br><span class="line">            replace.parent.leftChild = tmpNode;</span><br><span class="line">            tmpNode.parent = replace.parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            replace.parent.rightChild = tmpNode;</span><br><span class="line">            tmpNode.parent = replace.parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果replace右子树不为空，则用replace右子树替代replace</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        tmpNode = replace.rightChild;</span><br><span class="line">        <span class="keyword">if</span>(replace == <span class="keyword">this</span>.root)&#123;</span><br><span class="line">            <span class="keyword">this</span>.root = tmpNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(replace == replace.parent.leftChild)&#123;</span><br><span class="line">            replace.parent.leftChild = tmpNode;</span><br><span class="line">            tmpNode.parent = replace.parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            replace.parent.rightChild = tmpNode;</span><br><span class="line">            tmpNode.parent = replace.parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果replace的值不等于node的值，则将repleace的节点值赋给node</span></span><br><span class="line">    <span class="keyword">if</span>(replace.value.compareTo(node.value) != <span class="number">0</span>)&#123;</span><br><span class="line">        node.value = replace.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果replace为黑色节点，则对tmpNode进行删除调整</span></span><br><span class="line">    <span class="keyword">if</span>(replace.color.equals(<span class="string">"black"</span>))&#123;</span><br><span class="line">        deleteAdjust(tmpNode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果tmpNode是空节点，则将它删除</span></span><br><span class="line">    <span class="keyword">if</span>(tmpNode.value.equals(<span class="string">"*"</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(tmpNode == tmpNode.parent.leftChild)&#123;</span><br><span class="line">            tmpNode.parent.leftChild = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            tmpNode.parent.rightChild = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 需要查找的节点值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">search</span><span class="params">(RedAndBlackTree&lt;E&gt; tree,E value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree.root == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(value.compareTo(tree.root.value) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> tree.root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(value.compareTo(tree.root.value) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        RedAndBlackTree&lt;E&gt; leftTree = <span class="keyword">new</span> RedAndBlackTree&lt;E&gt;();</span><br><span class="line">        leftTree.root = tree.root.leftChild;</span><br><span class="line">        <span class="keyword">return</span> search(leftTree,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        RedAndBlackTree&lt;E&gt; rightTree = <span class="keyword">new</span> RedAndBlackTree&lt;E&gt;();</span><br><span class="line">        rightTree.root = tree.root.rightChild;</span><br><span class="line">        <span class="keyword">return</span> search(rightTree,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除节点后调整</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 需要调整的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAdjust</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果node是红色节点，则将node设为黑色</span></span><br><span class="line">    <span class="keyword">if</span>(node.color.equals(<span class="string">"red"</span>))&#123;</span><br><span class="line">        node.color = <span class="string">"black"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果node是黑色节点，且不是根节点</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(node != <span class="keyword">this</span>.root)&#123;</span><br><span class="line">        <span class="comment">//如果node是父亲的左孩子</span></span><br><span class="line">        <span class="keyword">if</span>(node == node.parent.leftChild)&#123;</span><br><span class="line">            <span class="comment">//将node父亲的右孩子赋给tmpNode</span></span><br><span class="line">            TreeNode tmpNode = node.parent.rightChild;</span><br><span class="line">            <span class="comment">//如果node的兄弟节点tmpNode为红色</span></span><br><span class="line">            <span class="keyword">if</span>(tmpNode.color.equals(<span class="string">"red"</span>))&#123;</span><br><span class="line">                <span class="comment">//将node的兄弟tmpNode设为黑色</span></span><br><span class="line">                tmpNode.color = <span class="string">"black"</span>;</span><br><span class="line">                <span class="comment">//将node的父亲设为红色</span></span><br><span class="line">                node.parent.color = <span class="string">"red"</span>;</span><br><span class="line">                <span class="comment">//将node的父亲进行左旋</span></span><br><span class="line">                leftRotate(node.parent);</span><br><span class="line">                <span class="comment">//重新将tmpNode设为node的兄弟</span></span><br><span class="line">                tmpNode = node.parent.rightChild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果node的兄弟节点tmpNode是黑色，而且tmpNode两个孩子节点都是黑色</span></span><br><span class="line">            <span class="keyword">if</span>(tmpNode.color.equals(<span class="string">"black"</span>) &amp;&amp; (tmpNode.leftChild == <span class="keyword">null</span> || tmpNode.leftChild.color.equals(<span class="string">"black"</span>)) &amp;&amp; (tmpNode.rightChild == <span class="keyword">null</span> || tmpNode.rightChild.color.equals(<span class="string">"black"</span>)))&#123;</span><br><span class="line">                <span class="comment">//将node的兄弟节点设为红色，递归对node节点的父亲进行操作</span></span><br><span class="line">                tmpNode.color = <span class="string">"red"</span>;</span><br><span class="line">                deleteAdjust(node.parent);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果node的兄弟节点tmpNode是黑色，而且tmpNode的左孩子是红色，右孩子是黑色</span></span><br><span class="line">            <span class="keyword">if</span>(tmpNode.color.equals(<span class="string">"black"</span>) &amp;&amp; tmpNode.leftChild != <span class="keyword">null</span> &amp;&amp; tmpNode.leftChild.color.equals(<span class="string">"red"</span>) &amp;&amp; (tmpNode.rightChild == <span class="keyword">null</span> || tmpNode.rightChild.color.equals(<span class="string">"black"</span>)))&#123;</span><br><span class="line">                <span class="comment">//将tmpNode的左孩子设为黑色</span></span><br><span class="line">                tmpNode.leftChild.color = <span class="string">"black"</span>;</span><br><span class="line">                <span class="comment">//将tmpNode设为红色</span></span><br><span class="line">                tmpNode.color = <span class="string">"red"</span>;</span><br><span class="line">                <span class="comment">//将tmpNode进行右旋</span></span><br><span class="line">                rightRotate(tmpNode);</span><br><span class="line">                <span class="comment">//重新将tmpNode设为node的兄弟节点</span></span><br><span class="line">                tmpNode = node.parent.rightChild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果node的兄弟节点tmpNode是黑色，而且tmpNode的右孩子是红色</span></span><br><span class="line">            <span class="keyword">if</span>(tmpNode.color.equals(<span class="string">"black"</span>) &amp;&amp; tmpNode.rightChild != <span class="keyword">null</span> &amp;&amp; tmpNode.rightChild.color.equals(<span class="string">"red"</span>))&#123;</span><br><span class="line">                <span class="comment">//将node父节点的颜色赋给兄弟节点tmpNode</span></span><br><span class="line">                tmpNode.color = node.parent.color;</span><br><span class="line">                <span class="comment">//将node的父节点设为黑色</span></span><br><span class="line">                node.parent.color = <span class="string">"black"</span>;</span><br><span class="line">                <span class="comment">//将tmpNode的右孩子设为黑色</span></span><br><span class="line">                tmpNode.rightChild.color = <span class="string">"black"</span>;</span><br><span class="line">                <span class="comment">//对node的父亲进行左旋</span></span><br><span class="line">                leftRotate(node.parent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果node是父亲的右孩子</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//将node父亲的左孩子赋给tmpNode</span></span><br><span class="line">            TreeNode tmpNode = node.parent.leftChild;</span><br><span class="line">            <span class="comment">//如果node的兄弟节点tmpNode为红色</span></span><br><span class="line">            <span class="keyword">if</span>(tmpNode.color.equals(<span class="string">"red"</span>))&#123;</span><br><span class="line">                <span class="comment">//将node的兄弟tmpNode设为黑色</span></span><br><span class="line">                tmpNode.color = <span class="string">"black"</span>;</span><br><span class="line">                <span class="comment">//将node的父亲设为红色</span></span><br><span class="line">                node.parent.color = <span class="string">"red"</span>;</span><br><span class="line">                <span class="comment">//将node的父亲进行右旋</span></span><br><span class="line">                rightRotate(node.parent);</span><br><span class="line">                <span class="comment">//重新将tmpNode设为node的兄弟</span></span><br><span class="line">                tmpNode = node.parent.leftChild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果node的兄弟节点tmpNode是黑色，而且tmpNode两个孩子节点都是黑色</span></span><br><span class="line">            <span class="keyword">if</span>(tmpNode.color.equals(<span class="string">"black"</span>) &amp;&amp; (tmpNode.leftChild == <span class="keyword">null</span> || tmpNode.leftChild.color.equals(<span class="string">"black"</span>)) &amp;&amp; (tmpNode.rightChild == <span class="keyword">null</span> || tmpNode.rightChild.color.equals(<span class="string">"black"</span>)))&#123;</span><br><span class="line">                <span class="comment">//将node的兄弟节点设为红色，递归对node节点的父亲进行操作</span></span><br><span class="line">                tmpNode.color = <span class="string">"red"</span>;</span><br><span class="line">                deleteAdjust(node.parent);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果node的兄弟节点tmpNode是黑色，而且tmpNode的右孩子是红色，左孩子是黑色</span></span><br><span class="line">            <span class="keyword">if</span>(tmpNode.color.equals(<span class="string">"black"</span>) &amp;&amp; tmpNode.rightChild != <span class="keyword">null</span> &amp;&amp; tmpNode.rightChild.color.equals(<span class="string">"red"</span>) &amp;&amp; (tmpNode.leftChild == <span class="keyword">null</span> || tmpNode.leftChild.color.equals(<span class="string">"black"</span>)))&#123;</span><br><span class="line">                <span class="comment">//将tmpNode的右孩子设为黑色</span></span><br><span class="line">                tmpNode.rightChild.color = <span class="string">"black"</span>;</span><br><span class="line">                <span class="comment">//将tmpNode设为红色</span></span><br><span class="line">                tmpNode.color = <span class="string">"red"</span>;</span><br><span class="line">                <span class="comment">//将tmpNode进行左旋</span></span><br><span class="line">                leftRotate(tmpNode);</span><br><span class="line">                <span class="comment">//重新将tmpNode设为node的兄弟节点</span></span><br><span class="line">                tmpNode = node.parent.leftChild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果node的兄弟节点tmpNode是黑色，而且tmpNode的左孩子是红色</span></span><br><span class="line">            <span class="keyword">if</span>(tmpNode.color.equals(<span class="string">"black"</span>) &amp;&amp; tmpNode.leftChild != <span class="keyword">null</span> &amp;&amp; tmpNode.leftChild.color.equals(<span class="string">"red"</span>))&#123;</span><br><span class="line">                <span class="comment">//将node父节点的颜色赋给兄弟节点tmpNode</span></span><br><span class="line">                tmpNode.color = node.parent.color;</span><br><span class="line">                <span class="comment">//将node的父节点设为黑色</span></span><br><span class="line">                node.parent.color = <span class="string">"black"</span>;</span><br><span class="line">                <span class="comment">//将tmpNode的左孩子设为黑色</span></span><br><span class="line">                tmpNode.leftChild.color = <span class="string">"black"</span>;</span><br><span class="line">                <span class="comment">//对node的父亲进行右旋</span></span><br><span class="line">                rightRotate(node.parent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="打印红黑树"><a href="#打印红黑树" class="headerlink" title="打印红黑树"></a>打印红黑树</h3><p>根据层次遍历思想，使用两个队列，将红黑树逐层打印（空叶子节点打印*）。<br>具体步骤如下：</p><ol><li>将root节点入队列list1中。</li><li>循环操作，如果list1不为空，就出队列，将出队列的节点（记为node）入list2中，将node节点的左右孩子分别入队列list1中，如果左右孩子是空就新建一个节点值为*的树节点入队列。</li><li>判断list1如果不为空且其中的节点值全为*，则代表已经遍历完成，跳出循环。</li><li>将list1中剩余节点全部入队列list2中。</li><li>循环打印list2中的节点值以及颜色，每打印2的n次方个数打印一个空格（n从0开始递增）。</li></ol><p>打印红黑树Java实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印红黑树,根据层次遍历思想，使用两个队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tree 需要打印的红黑树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTree</span><span class="params">(RedAndBlackTree&lt;E&gt; tree)</span></span>&#123;</span><br><span class="line">    TreeNode root = tree.root;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//list1队列用作层次遍历用</span></span><br><span class="line">    LinkedList&lt;TreeNode&gt; list1 = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">    <span class="comment">//list2队列用作最后打印用</span></span><br><span class="line">    LinkedList&lt;TreeNode&gt; list2 = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">    <span class="comment">//将根节点入队列list1</span></span><br><span class="line">    list1.addLast(root);</span><br><span class="line">    <span class="comment">//如果队列list1不为空，则继续循环</span></span><br><span class="line">    <span class="keyword">while</span>(list1.size() != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//list1出队列</span></span><br><span class="line">        TreeNode node = list1.removeFirst();</span><br><span class="line">        <span class="comment">//将节点存进list2队列</span></span><br><span class="line">        list2.addLast(node);</span><br><span class="line">        <span class="comment">//将节点左右孩子分别入队列list1，如果为空则入节点值为*的</span></span><br><span class="line">        <span class="keyword">if</span>(node.leftChild != <span class="keyword">null</span>)&#123;</span><br><span class="line">            list1.addLast(node.leftChild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            TreeNode tmpNode = <span class="keyword">new</span> TreeNode(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,(E)<span class="string">"*"</span>,<span class="string">"black"</span>);</span><br><span class="line">            list1.addLast(tmpNode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.rightChild != <span class="keyword">null</span>)&#123;</span><br><span class="line">            list1.addLast(node.rightChild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            TreeNode tmpNode = <span class="keyword">new</span> TreeNode(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,(E)<span class="string">"*"</span>,<span class="string">"black"</span>);</span><br><span class="line">            list1.addLast(tmpNode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断如果队列list1不为空且均为*,代表遍历完成，将list1中剩余节点值均入队列list2中</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(list1.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num = <span class="number">0</span>;num &lt; list1.size();num++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!list1.get(num).value.equals(<span class="string">"*"</span>))&#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(list1.size() != <span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode tmp = list1.removeFirst();</span><br><span class="line">                list2.addLast(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印list2中最终结果，每打印2的n次方个数打印一个空格（n从0开始递增）</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>,j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(list2.size() != <span class="number">0</span>)&#123;</span><br><span class="line">        TreeNode treeNode = list2.removeFirst();</span><br><span class="line">        System.out.print(treeNode.value + <span class="string">":"</span> +treeNode.color  + <span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span>(i == Math.pow(<span class="number">2</span>,j))&#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完整代码已经上传github:<br><a href="https://github.com/3ylh3/DataStructureAndAlgorithm/tree/master/src/main/java/com/xiaobai/datastructure/redandblacktree" target="_blank" rel="noopener">https://github.com/3ylh3/DataStructureAndAlgorithm/tree/master/src/main/java/com/xiaobai/datastructure/redandblacktree</a><br>参考博文：<a href="https://www.cnblogs.com/skywang12345/p/3245399.html" target="_blank" rel="noopener">https://www.cnblogs.com/skywang12345/p/3245399.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红黑树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见排序算法Java实现</title>
      <link href="/2019/03/28/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95Java%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/03/28/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95Java%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h4><p>冒泡排序的思想是遍历若干次数组，每次遍历从左往右比较相邻两个数大小，如果左边的元素大于右边的，则交换位置，这样一次遍历后最大的一个元素就会在数组尾部。冒泡排序时间复杂度是<script type="math/tex">O(n^2)</script>,是稳定的算法。<br>算法稳定性 — 假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的。<br><a id="more"></a><br>java实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 需要排序的整型数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= a.length;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; a.length - i;j++)&#123;</span><br><span class="line">            <span class="comment">//从数组第一个数开始，依次和它后面的数比较，如果比后面的数大，则交换位置</span></span><br><span class="line">            <span class="keyword">if</span>(a[j] &gt; a[j + <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = a[j];</span><br><span class="line">                a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">                a[j + <span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-快速排序"><a href="#2-快速排序" class="headerlink" title="2.快速排序"></a>2.快速排序</h4><p>快速排序的思想是选一个基准数，通过一趟排序把所有小于基准值的数放在基准值左边，把大于基准值的数放在基准值右边，然后递归对左右两部分进行排序。快速排序的最坏时间复杂度是<script type="math/tex">O(n^2)</script>,平均时间复杂度是<script type="math/tex">O(n*\lg n)</script>，是不稳定的排序算法。<br>java实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 需要排序的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> l 左边界</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> r 右边界</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//基准值取a[i]</span></span><br><span class="line">    <span class="keyword">int</span> base = a[l];</span><br><span class="line">    <span class="keyword">int</span> i = l;</span><br><span class="line">    <span class="keyword">int</span> j = r;</span><br><span class="line">    <span class="comment">//当i小于j时循环</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">        <span class="comment">//从右向左找出第一个小于base的数，和a[i]交换</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j] &lt; base)&#123;</span><br><span class="line">                a[i] = a[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从左向右找出第一个大于base的数，和a[j]交换</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt; base)&#123;</span><br><span class="line">                a[j] = a[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将a[i]设为base</span></span><br><span class="line">    a[i] = base;</span><br><span class="line">    <span class="comment">//递归调用</span></span><br><span class="line">    quickSort(a,l,i - <span class="number">1</span>);</span><br><span class="line">    quickSort(a,i + <span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-直接插入排序"><a href="#3-直接插入排序" class="headerlink" title="3.直接插入排序"></a>3.直接插入排序</h4><p>直接插入排序的思想是讲数组分为有序表和无序表两个部分，开始时有序表只含有1个元素（数组第一个元素），无序表中含有n-1个元素，n为数组长度，每趟排序从无序表中取出一个元素插入到有序表中对应的位置，重复n-1次可完成排序过程。直接插入排序的时间复杂度是<script type="math/tex">O(n^2)</script>,是稳定的排序算法。<br>java实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接插入排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 待排序数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">    <span class="comment">//循环处理无序表元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; a.length;i++)&#123;</span><br><span class="line">        <span class="comment">//寻找在有序表中插入位置,将后面的元素后移一位后插入</span></span><br><span class="line">        <span class="keyword">int</span> tmp = a[i];</span><br><span class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;j &gt;= <span class="number">0</span>;j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j] &gt; tmp)&#123;</span><br><span class="line">                a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">                a[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4-希尔排序"><a href="#4-希尔排序" class="headerlink" title="4.希尔排序"></a>4.希尔排序</h4><p>希尔排序是插入排序的一种，是针对直接插入排序算法的改进，又称缩小增量排序，实质上是一种分组的插入排序算法，基本思想是选取一个增量increment(又称步长),将数组分成increment个组，分别对每个组进行直接插入排序，然后缩小increment的值，重复上述排序过程，当increment为1时，整个数组就是有序的，希尔排序的时间复杂度和步长有关，是不稳定的排序算法，假设步长是4,待排序数组是{10,2,8,7,9,3,4,1,6,5}，则第一趟排序图解如下：<br><img src="http://47.93.194.195/shellSort.png" alt="希尔排序"><br>步长是4，分成四组{10,9,6}、{2,3,5}、{8，4}、{7,1}，第一趟排序后四组分别为{6,9,10}、{2,3,5}、{4,8}、{1,7}，整个数组为{6,2,4,19,3,8,7,10,5}。<br>java实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 希尔排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 待排序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> increment 步长</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> increment)</span></span>&#123;</span><br><span class="line">    <span class="comment">//每次步长变为原来的一半</span></span><br><span class="line">    <span class="keyword">for</span>(;increment &gt; <span class="number">0</span>;increment /= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">//共increment个组，对每个组进行直接插入排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> in = <span class="number">0</span>;in &lt; increment;in++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = in + increment;i &lt; a.length;i += increment)&#123;</span><br><span class="line">                <span class="comment">//寻找在有序表中插入位置,将后面的元素后移一位后插入</span></span><br><span class="line">                <span class="keyword">int</span> tmp = a[i];</span><br><span class="line">                <span class="keyword">int</span> j = i - increment;</span><br><span class="line">                <span class="keyword">for</span>(;j &gt;= in;j -= increment)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(a[j] &gt; tmp)&#123;</span><br><span class="line">                        a[j + increment] = a[j];</span><br><span class="line">                        a[j] = tmp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5-选择排序"><a href="#5-选择排序" class="headerlink" title="5.选择排序"></a>5.选择排序</h4><p>选择排序的思想是在无序序列（初始为整个数组）中找出最小的数，和第一个数交换，接着再从剩余的数中找出最小的数放到已排序序列末尾，以此类推，直至完成排序。选择排序的时间复杂度是<script type="math/tex">O(n^2)</script>,是稳定的排序算法。<br>java实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 待排序数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">    <span class="comment">//从a[0]开始</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; a.length;i++)&#123;</span><br><span class="line">        <span class="comment">//找出a[j] - a[a.length - 1]中最小的数</span></span><br><span class="line">        <span class="keyword">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt; a.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j] &lt; a[min])&#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//和a[i]交换</span></span><br><span class="line">        <span class="keyword">int</span> tmp = a[i];</span><br><span class="line">        a[i] = a[min];</span><br><span class="line">        a[min] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="6-堆排序"><a href="#6-堆排序" class="headerlink" title="6.堆排序"></a>6.堆排序</h4><p>堆排序使用了大根堆，首先了解大根堆的概念，大根堆是特殊的二叉树，常用数组实现，有以下特性：</p><ol><li>索引为n的节点，它的左孩子索引为<script type="math/tex">2*n+1</script>。</li><li>索引为n的节点，它的右孩子索引为<script type="math/tex">2*n+2</script>。</li><li>索引为n的节点，它的父节点索引为<script type="math/tex">floor((n-1)/2)</script>。  </li></ol><p>大根堆图示：  </p><p><img src="https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=28d03bd9f21f3a295a9dddc8a9159009/d52a2834349b033bff3166dd17ce36d3d539bd78.jpg" alt="大根堆">  </p><p>堆排序思想是将数组构建成一个大根堆，然后交换数组首尾元素，这样最大元素就在数组最后，接着把数组前面的元素再构建成大根堆并交换元素，以此类推直至数组变为有序的。堆排序的时间复杂度是<script type="math/tex">O(n*lg n)</script>，是不稳定的排序算法。<br>大根堆调整算法的思想是从最后一个非叶子元素（索引为<script type="math/tex">n/2-1</script>,n是数组长度）开始调整，将它和它的左右孩子中较大的数比较，如果它小的话则交换，然后递归调整孩子节点。<br>java实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 待排序数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">    <span class="comment">//将数组调整成大根堆,从最后一个非叶子节点开始调整</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.length / <span class="number">2</span> - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--) &#123;</span><br><span class="line">        adjust(a,i,a.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将第一个数和最后一个数交换，然后将数组前面内容重新调整成大根堆</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.length - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = a[i];</span><br><span class="line">        a[i] = a[<span class="number">0</span>];</span><br><span class="line">        a[<span class="number">0</span>] = tmp;</span><br><span class="line">        <span class="comment">//从最后一个非叶子节点开始调整，将剩余数组调整成大根堆</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i / <span class="number">2</span> - <span class="number">1</span>;j &gt;= <span class="number">0</span>;j--)&#123;</span><br><span class="line">            adjust(a,j,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大根堆调整算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 待调整数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 调整的节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> length 待调整数组长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adjust</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> index,<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="comment">//记左右孩子中最大值的索引为max</span></span><br><span class="line">    <span class="keyword">int</span> max = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ((index * <span class="number">2</span> + <span class="number">2</span>) &lt; length &amp;&amp; a[max] &lt; a[index * <span class="number">2</span> + <span class="number">2</span>]) &#123;</span><br><span class="line">        max = index * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果a[index]小于a[max]，则交换两者</span></span><br><span class="line">    <span class="keyword">if</span> (a[index] &lt; a[max]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = a[index];</span><br><span class="line">        a[index] = a[max];</span><br><span class="line">        a[max] = tmp;</span><br><span class="line">        <span class="comment">//如果max节点有孩子，则递归调整</span></span><br><span class="line">        <span class="keyword">if</span> (max * <span class="number">2</span> + <span class="number">1</span> &lt; length) &#123;</span><br><span class="line">            adjust(a,max,length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="7-归并排序"><a href="#7-归并排序" class="headerlink" title="7.归并排序"></a>7.归并排序</h4><p>归并排序的思想是讲待排序序列从中间一分为二，然后递归的对两个序列进行归并排序，直至序列长度为1，然后将已经排序好的两个有序序列合并为一个有序序列。归并排序的时间复杂度是<script type="math/tex">O(n*lg n)</script>,是稳定的排序算法。<br>java实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 待排序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> start 开始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> end 结束位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start &lt; end)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (end + start) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//递归对左右两个序列进行排序</span></span><br><span class="line">        mergeSort(a,start,mid);</span><br><span class="line">        mergeSort(a,mid + <span class="number">1</span>,end);</span><br><span class="line">        <span class="comment">//合并两个有序序列</span></span><br><span class="line">        merge(a,start,mid,end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并两个有序序列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 待合并序列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> start 起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mid 中间位置（第一个序列结束位置）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> end 结束位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> start,<span class="keyword">int</span> mid,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="comment">//辅助数组</span></span><br><span class="line">    <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[end - start + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> i = start;</span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//遍历第一个有序序列</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid)&#123;</span><br><span class="line">        <span class="comment">//如果第二个有序序列没有遍历完</span></span><br><span class="line">        <span class="keyword">if</span>(j &lt;= end)&#123;</span><br><span class="line">            <span class="comment">//比较两个序列当前元素，将较小的放到辅助数组中</span></span><br><span class="line">            <span class="keyword">if</span>(a[i] &lt; a[j])&#123;</span><br><span class="line">                tmp[k] = a[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                tmp[k] = a[j];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果第二个数组已经遍历完，则将第一个序列中剩余的数都放到辅助数组中</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            tmp[k] = a[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果第二个序列还没有遍历完，则将剩余的数全部放到辅助数组中</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= end)&#123;</span><br><span class="line">        tmp[k] = a[j];</span><br><span class="line">        j++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将辅助数组中的数复制到原数组</span></span><br><span class="line">    System.arraycopy(tmp,<span class="number">0</span>,a,start,tmp.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><div class="table-container"><table><thead><tr><th>排序算法</th><th>时间复杂度</th><th>是否稳定</th></tr></thead><tbody><tr><td>冒泡排序</td><td><script type="math/tex">O(n^2)</script></td><td>稳定</td></tr><tr><td>快速排序</td><td>最坏<script type="math/tex">O(n^2)</script>，平均$O(n*lg n)$</td><td>不稳定</td></tr><tr><td>直接插入排序</td><td><script type="math/tex">O(n^2)</script></td><td>稳定</td></tr><tr><td>希尔排序</td><td>和选取的步长有关</td><td>不稳定</td></tr><tr><td>选择排序</td><td><script type="math/tex">O(n^2)</script></td><td>稳定</td></tr><tr><td>堆排序</td><td><script type="math/tex">O(n*lg n)</script></td><td>不稳定</td></tr><tr><td>归并排序</td><td><script type="math/tex">O(n*lg n)</script></td><td>稳定</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈SpringAOP</title>
      <link href="/2019/03/28/%E6%B5%85%E8%B0%88SpringAOP/"/>
      <url>/2019/03/28/%E6%B5%85%E8%B0%88SpringAOP/</url>
      
        <content type="html"><![CDATA[<p>AOP是Aspect Oriented Programming的缩写，即面向切面编程。在一个系统中，有的功能是散布在应用的多处，跨了应用的多个点，这些功能被称为横切关注点，比如系统的日志记录。这些横切关注点在概念上独立于应用的业务逻辑，但通常它们会嵌入到应用的业务逻辑中，这样会造成两个问题：</p><ol><li>实现横切关注点功能的代码会重复出现在很多地方，如果需要改它的逻辑必须修改它嵌入的各个模块。即使把横切关注点作为一个独立的模块，但是对它的方法调用还是会重复的出现在每一个要嵌入的模块中；</li><li>嵌入横切关注点的模块除了要关注自己本身的业务逻辑外，还要关注横切关注点要的功能，导致代码混乱。  </li></ol><a id="more"></a><p>举个不太恰当的例子，把一个系统看作一个餐厅，每个来用餐的顾客是系统的一个独立模块，服务生可以看作一个横切关注点，他提供包括顾客用餐之前的迎接以及用餐之后的打扫餐桌。<br>顾客接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Guest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>服务生类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="comment">//迎接顾客</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"The server is greeting the guest"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打扫餐桌</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"The server is  cleaning the table"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>顾客实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Guest1</span> <span class="keyword">implements</span> <span class="title">Guest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Server server;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Guest1</span><span class="params">(Server server)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.server = server;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//服务生迎接顾客</span></span><br><span class="line">        server.greet();</span><br><span class="line">        <span class="comment">//顾客用餐</span></span><br><span class="line">        System.out.println(<span class="string">"Guest1 is eating"</span>);</span><br><span class="line">        <span class="comment">//服务生打扫餐桌</span></span><br><span class="line">        server.cleanTable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从这个例子可以很明显的看出来，服务生嵌入到了顾客中，但是理想的情况应该是顾客只需要关注自己的用餐就好，至于服务生迎接以及打扫的工作不是顾客需要关注的。AOP要解决的问题就是把这些横切关注点和业务逻辑分离。要了解AOP，首先要了解一些AOP的术语：</p><ol><li>连接点（Join point） 连接点是应用程序执行过程中能够插入切面（下面会讲）的一个点，Spring只支持方法级别的连接点。</li><li>通知（Advice） 切面需要完成的工作被称为通知，通知定义了切面是什么以及何时使用。Spring切面有以下5种通知：<ul><li>前置通知（Before）:在目标方法被调用之前调用通知。</li><li>后置通知（After）:在目标方法完成之后调用通知，不关心方法的输出。</li><li>返回通知（After-returning）：在目标方法执行成功之后调用通知。</li><li>异常通知（After-throwing） ： 在目标方法抛出异常后调用通知。</li><li>环绕通知（Around） ： 包裹了目标方法， 在目标方法调用之前和调用之后执行自定义的行为。</li></ul></li><li>切点（ Poincut）：一个切面不需要通知所有的连接点，需要被通知的连接点即为切点，切点定义了切面在何处通知。</li><li>切面（Aspect）:切面是通知和切点的结合，通知定义了切面是什么、何时使用，切点定义了在何处使用。</li><li>引入（Introduction）：引入允许向现有类添加属性或方法。</li><li>织入（ Weaving）：织入是把切面应用到目标对象的过程。Spring AOP是在运行期织入切面的。</li></ol><p>Spring的切面由包裹了目标对象的代理类实现，代理类封装了目标类，拦截被通知方法的调用，执行相关切面逻辑后调用被通知方法。<br>现在再来看一下上面餐厅的例子，让我们用Spring AOP来把服务生作为切面独立出来。<br>修改后的顾客实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Guest1</span> <span class="keyword">implements</span> <span class="title">Guest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Guest1 is eating"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改后的顾客实现类只有吃饭的逻辑，没有服务生的相关逻辑。<br>在配置文件中配置AOP：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"guest1"</span> <span class="attr">class</span>=<span class="string">"com.xiaobai.guest.Guest1"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"server"</span> <span class="attr">class</span>=<span class="string">"com.xiaobai.server.Server"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"server"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"eat"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.xiaobai.guest.Guest.eat(..))"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">"eat"</span> <span class="attr">method</span>=<span class="string">"greet"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">"eat"</span> <span class="attr">method</span>=<span class="string">"cleanTable"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其中guest1是顾客，server是服务生，aop:config是AOP的配置。aop:aspect声明了一个切面，指向服务生；aop:pointcut定义了一个切点，execution(<em> com.xiaobai.guest.Guest.eat(..))是切点表达式，execution代表匹配的连接点是方法，</em>代表任意的返回类型，表明不关心方法的返回值，com.xiaobai.guest.Guest.eat(..)是方法所属类的包名以及类名，..表明任意的方法入参；aop:before定义了一个前置通知，指向eat切点，执行的方法是greet;aop:after定义了一个后置通知，指向eat切点，执行的方法是cleanTable。配置完成后在主类中测试一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationConfig.xml"</span>);</span><br><span class="line">        Guest guest1 = (Guest)ctx.getBean(<span class="string">"guest1"</span>);</span><br><span class="line">        guest1.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行主类会看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The server is greeting the guest</span><br><span class="line">Guest1 is eating</span><br><span class="line">The server is  cleaning the table</span><br></pre></td></tr></table></figure></p><p>这样服务生就和顾客的业务逻辑分离了。<br>让我们再添加一个顾客：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Guest2</span> <span class="keyword">implements</span> <span class="title">Guest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Guest2 is eating"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置文件中添加guest2的bean声明：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"guest2"</span> <span class="attr">class</span>=<span class="string">"com.xiaobai.guest.Guest2"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>主类中增加guest2的调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Guest guest1 = (Guest)ctx.getBean(<span class="string">"guest1"</span>);</span><br><span class="line">Guest guest2 = (Guest)ctx.getBean(<span class="string">"guest2"</span>);</span><br><span class="line">guest1.eat();</span><br><span class="line">System.out.println();</span><br><span class="line">guest2.eat();</span><br></pre></td></tr></table></figure></p><p>运行后会看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The server is greeting the guest</span><br><span class="line">Guest1 is eating</span><br><span class="line">The server is  cleaning the table</span><br><span class="line"></span><br><span class="line">The server is greeting the guest</span><br><span class="line">Guest2 is eating</span><br><span class="line">The server is  cleaning the table</span><br></pre></td></tr></table></figure></p><p>可以看到不用顾客操心，服务生就会为每一位顾客服务。<br>现在假设我们的服务生不想为guest2服务了，有什么办法呢？使用bean()指示器在切点中选择相应的bean就可以了。修改配置文件中定义切点内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"eat"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.xiaobai.guest.Guest.eat(..)) and !bean(guest2)"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>!bean(guest2)表示要切点匹配除了id为guest2的bean，再次运行程序会看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The server is greeting the guest</span><br><span class="line">Guest1 is eating</span><br><span class="line">The server is  cleaning the table</span><br><span class="line"></span><br><span class="line">Guest2 is eating</span><br></pre></td></tr></table></figure></p><p>服务生已经不再为guest2服务了。<br>再考虑一种情况，假设又来了一位顾客Guest3，他是个专业找茬的，总会说饭菜难吃，这时服务生会向顾客道歉，让我们修改一下server，给他添加一个道歉的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apologize</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"The server is apologizing"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后再自定义一个难吃的异常：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnpalatableException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"So unpalatable!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改一下Guest接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Guest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> <span class="keyword">throws</span> UnpalatableException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新建一个顾客实现类Guest3,由它抛出异常：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Guest3</span> <span class="keyword">implements</span> <span class="title">Guest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> <span class="keyword">throws</span> UnpalatableException</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Guest3 is complaining"</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnpalatableException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在配置文件中添加guest3的定义：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"guest3"</span> <span class="attr">class</span>=<span class="string">"com.xiaobai.guest.Guest3"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>在配置文件中新增一个异常通知：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"server"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"eat"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.xiaobai.guest.Guest.eat(..)) and !bean(guest2)"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">"eat"</span> <span class="attr">method</span>=<span class="string">"greet"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">"eat"</span> <span class="attr">method</span>=<span class="string">"cleanTable"</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">pointcut-ref</span>=<span class="string">"eat"</span> <span class="attr">method</span>=<span class="string">"apologize"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在主类中测试一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationConfig.xml"</span>);</span><br><span class="line">        Guest guest1 = (Guest)ctx.getBean(<span class="string">"guest1"</span>);</span><br><span class="line">        Guest guest2 = (Guest)ctx.getBean(<span class="string">"guest2"</span>);</span><br><span class="line">        Guest guest3 = (Guest)ctx.getBean(<span class="string">"guest3"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            guest1.eat();</span><br><span class="line">            System.out.println();</span><br><span class="line">            guest2.eat();</span><br><span class="line">            System.out.println();</span><br><span class="line">            guest3.eat();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (UnpalatableException e)&#123;</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行后会看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">The server is greeting the guest</span><br><span class="line">Guest1 is eating</span><br><span class="line">The server is  cleaning the table</span><br><span class="line"></span><br><span class="line">Guest2 is eating</span><br><span class="line"></span><br><span class="line">The server is greeting the guest</span><br><span class="line">Guest3 is complaining</span><br><span class="line">The server is  cleaning the table</span><br><span class="line">The server is apologizing</span><br><span class="line">So unpalatable!</span><br></pre></td></tr></table></figure></p><p>我们看到server在guest3抛出异常后执行了 apologize方法。<br>再修改一下配置文件，把后置通知改为返回通知：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">pointcut-ref</span>=<span class="string">"eat"</span> <span class="attr">method</span>=<span class="string">"cleanTable"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>重新运行一下，可以看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">The server is greeting the guest</span><br><span class="line">Guest1 is eating</span><br><span class="line">The server is  cleaning the table</span><br><span class="line"></span><br><span class="line">Guest2 is eating</span><br><span class="line"></span><br><span class="line">The server is greeting the guest</span><br><span class="line">Guest3 is complaining</span><br><span class="line">The server is apologizing</span><br><span class="line">So unpalatable!</span><br></pre></td></tr></table></figure></p><p>server在guest3抛出异常后只执行了apologize方法。<br>接下来使用环绕通知重写一下服务生：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">(ProceedingJoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"The server is greeting the guest"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            joinPoint.proceed();</span><br><span class="line">            System.out.println(<span class="string">"The server is  cleaning the table"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"The server is apologizing"</span>);</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>服务生首先进行迎接客人，然后调用被通知的方法（joinPoint.proceed()），方法调用结束后进行打扫，如果方法抛出异常则进行道歉。<br>修改一下配置文件的内容，将前置通知、返回通知和异常通知改为一个环绕通知：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">pointcut-ref</span>=<span class="string">"eat"</span> <span class="attr">method</span>=<span class="string">"server"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>重新运行后会看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">The server is greeting the guest</span><br><span class="line">Guest1 is eating</span><br><span class="line">The server is  cleaning the table</span><br><span class="line"></span><br><span class="line">Guest2 is eating</span><br><span class="line"></span><br><span class="line">The server is greeting the guest</span><br><span class="line">Guest3 is complaining</span><br><span class="line">The server is apologizing</span><br><span class="line">So unpalatable!</span><br></pre></td></tr></table></figure></p><p>可以看到效果和前面的是一样的。<br>切面也可以访问被通知方法的参数，让我们修改一下Guest接口，添加一个pay方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(<span class="keyword">int</span> money)</span></span>;</span><br></pre></td></tr></table></figure></p><p>实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Guest1 is paying "</span> + money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>server添加receiveMoney方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMoney</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"The server is receiving money "</span> + money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在配置文件中新增一个切面：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"server"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pay"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.xiaobai.guest.Guest.pay(int)) and args(money)"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">pointcut-ref</span>=<span class="string">"pay"</span> <span class="attr">method</span>=<span class="string">"receiveMoney"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其中int代表接受int类型的参数，args(money)指定了参数。<br>修改一下主类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationConfig.xml"</span>);</span><br><span class="line">        Guest guest1 = (Guest)ctx.getBean(<span class="string">"guest1"</span>);</span><br><span class="line">            guest1.eat();</span><br><span class="line">            System.out.println();</span><br><span class="line">            guest1.pay(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行后会看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">The server is greeting the guest</span><br><span class="line">Guest1 is eating</span><br><span class="line">The server is  cleaning the table</span><br><span class="line"></span><br><span class="line">Guest1 is paying 100</span><br><span class="line">The server is receiving money 100</span><br></pre></td></tr></table></figure></p><p>可以看到server访问到了pay方法的参数money。</p><p>完整代码已经上传到github：<a href="https://github.com/3ylh3/SpingAOPDemo" target="_blank" rel="noopener">https://github.com/3ylh3/SpingAOPDemo</a><br>参考资料：《Spring实战》</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring AOP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
